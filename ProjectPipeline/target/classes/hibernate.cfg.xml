<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <!-- Connection settings -->
        <property name="hibernate.connection.driver_class">org.postgresql.Driver</property>          
        <!-- SQL dialect -->
        <property name="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</property>

		<!-- Specify your database credentials. Note that you shouldn't actually hardcode your
		credentials into this file. -->
		<property name="hibernate.connection.url"></property>
		<property name="hibernate.connection.username"></property>
		<property name="hibernate.connection.password"></property>
		<!-- This property allows us to see the SQL queries generated by Hibernate in the console. -->
		<property name="show_sql">true</property>
		<!-- This property determines how many connections a single user is allowed to your DB. -->
		<property name="hibernate.connection.pool_size">5</property>
		<!-- This property defines how Hibernate sessions are handled. In this case, sessions
		are tracked by their thread of execution. -->
		<property name="hibernate.current_session_context_class">thread</property>
		<!-- We can run Hibernate in 4 different modes: create, update, create-drop, and validate.
		create: Hibernate will purge the existing tables in your DB and create the tables from
		scratch.
		
		update: Hibernate will connect to an existing database and create it from scratch without
		purging it. It will update any entities within our database that are not consistent with our
		mapped Java models. 
		
		create-drop: Hibernate creates all of the tables and then drops them when the application
		stops running. This is good for testing purposes but not ideal in production.
		
		validate: Hibernate will validate a pre-existing schema. This means that it will make sure
		that your Java models are mapped in a way that is consistent with the existing schema.-->
		<property name="hibernate.hbm2ddl.auto">validate</property>  
        <!-- Annotated entity classes -->
        <mapping class="com.revature.model.Employee"/>
        <mapping class="com.revature.model.EmployeeRole"/>
        <mapping class="com.revature.model.EmployeeMgr"/>
        <mapping class="com.revature.model.EmployeeMgrId"/>
        <mapping class="com.revature.model.ReimbReqStatus"/>
        <mapping class="com.revature.model.ReimbRequest"/>
    </session-factory>
</hibernate-configuration>